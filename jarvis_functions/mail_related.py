from docx import Document
import win32com.client as win32
import time
import dateparser

from datetime import datetime, timedelta

from elevenlabs import play
from elevenlabs.client import ElevenLabs
import speech_recognition as sr

import os

from api_keys.api_keys import ELEVEN_LABS_API

client = ElevenLabs(api_key=ELEVEN_LABS_API)
r = sr.Recognizer()


def record_text():
    """Listen for speech and return the recognized text."""
    try:
        with sr.Microphone() as source:
            #print("Listening...")
            r.adjust_for_ambient_noise(source, duration=0.2)
            audio = r.listen(source)

            # Recognize speech using Google API
            MyText = r.recognize_google(audio, language="bg-BG")
            print(f"You said: {MyText}")
            return MyText.lower()

    except sr.RequestError as e:
        print(f"API Request Error: {e}")
        return None
    except sr.UnknownValueError:
        print("Sorry, I didn't catch that. Please try again.")
        return None

def send_email_function(subject, body, to_email):
    outlook = win32.Dispatch('outlook.application')
    mail = outlook.CreateItem(0)
    mail.Subject = subject
    mail.Body = body
    mail.To = to_email
    mail.Send()

def parse_natural_time(natural_time):
    """
    Parses a natural language time expression (e.g., '3 —á–∞—Å–∞ —Å–ª–µ–¥–æ–±—è–¥ –¥–Ω–µ—Å', 'tomorrow', 'next Wednesday')
    into a datetime object.
    """

    # Manually handle '–¥–Ω–µ—Å' and '—É—Ç—Ä–µ' since dateparser fails sometimes
    now = datetime.now()

    # Replace Bulgarian words with English for better parsing
    normalized_time = (
        natural_time.replace("–¥–Ω–µ—Å", "today")
        .replace("—É—Ç—Ä–µ", "tomorrow")
        .replace("—Å–ª–µ–¥–æ–±—è–¥", "PM")
        .replace("—Å—É—Ç—Ä–∏–Ω—Ç–∞", "AM")
    )

    # Try parsing with dateparser
    event_time = dateparser.parse(
        normalized_time,
        languages=['bg', 'en'],  # Use both Bulgarian and English
        settings={'PREFER_DATES_FROM': 'future'}
    )

    # If dateparser fails, manually handle simple cases
    if event_time is None:
        if "–¥–Ω–µ—Å" in natural_time:
            event_time = now.replace(hour=15, minute=0, second=0, microsecond=0)
        elif "—É—Ç—Ä–µ" in natural_time:
            event_time = (now + timedelta(days=1)).replace(hour=15, minute=0, second=0, microsecond=0)
        else:
            raise ValueError(f"Could not parse the given time expression: {natural_time}")

    return event_time

def create_outlook_appointment(subject, start_time, duration):
    outlook = win32.Dispatch("Outlook.Application")
    appointment = outlook.CreateItem(1)  # 1 = olAppointmentItem

    appointment.Subject = subject
    appointment.Start = start_time
    appointment.Duration = duration
    appointment.ReminderMinutesBeforeStart = 15
    appointment.Save()

    print(f"‚úÖ Appointment '{subject}' scheduled for {start_time}")


def send_email(jarvis_voice: str) -> str:
    audio = client.generate(text="–†–∞–∑–±–∏—Ä–∞ —Å–µ, –∫—ä–º –∫–æ–≥–æ –±–∏—Ö—Ç–µ –∂–µ–ª–∞–ª–∏ –¥–∞ –ø—Ä–∞—Ç–∏—Ç–µ –∏–º–µ–π–ª–∞?", voice=jarvis_voice)
    play(audio)

    print("Listening for email info...")
    user_input = record_text()

    if "—Ç–∞—Ç–∏" in user_input or "–±–∞—â–∞ –º–∏" in user_input:
        to_email = "bojidarbojinov@outlook.com"
    elif "–º–∞–º–∞" in user_input or "–º–∞–π–∫–∞ –º–∏" in user_input:
        to_email = "kameliqbojinova@outlook.com"

    audio = client.generate(text="–ö–∞–∫–≤–∞ —â–µ –µ —Ç–µ–º–∞—Ç–∞ –Ω–∞ –≤–∞—à–µ—Ç–æ –ø–∏—Å–º–æ?", voice=jarvis_voice)
    play(audio)

    print("Listening for email info...")
    subject = record_text()

    audio = client.generate(text="–ö–∞–∫–≤–æ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑–ø—Ä–∞—Ç–∏—Ç–µ?", voice=jarvis_voice)
    play(audio)

    print("Listening for email info...")
    body = record_text()

    audio = client.generate(text="–°—É–ø–µ—Ä, –ø—Ä–µ–¥–∏ –¥–∞ –∏–∑–ø—Ä–∞—Ç—è –∏–º–µ–π–ª–∞, —â–µ –≤–∏ –∫–∞–∂–∞ –∫–∞–∫–≤–æ —Å—ä–º —Å–∏ –∑–∞–ø–∏—Å–∞–ª",
                            voice=jarvis_voice)
    play(audio)

    if to_email == "bojidarbojinov@outlook.com":
        audio = client.generate(text="–ò–º–µ–π–ª–∞ –µ –∫—ä–º –ë–æ–∂–∏–¥–∞—Ä –ë–æ–∂–∏–Ω–æ–≤ (–±–∞—â–∞ –≤–∏)", voice=jarvis_voice)
        play(audio)
    elif to_email == "kameliqbojinova@outlook.com":
        audio = client.generate(text="–ò–º–µ–π–ª–∞ –µ –∫—ä–º –ö–∞–º–µ–ª–∏—è –ë–æ–∂–∏–Ω–æ–≤–∞ (–º–∞–π–∫–∞ –≤–∏)", voice=jarvis_voice)
        play(audio)
    audio = client.generate(text="–¢–µ–º–∞—Ç–∞ –Ω–∞ –ø–∏—Å–º–æ—Ç–æ –µ " + subject + "–ò —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ –Ω–∞ –ø–∏—Å–º–æ—Ç–æ –µ " + body,
                            voice=jarvis_voice)
    play(audio)

    audio = client.generate(text="–í—Å–∏—á–∫–æ –Ω–∞—Ä–µ–¥ –ª–∏ –µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞ –≤ –ø–∏—Å–º–æ—Ç–æ?", voice=jarvis_voice)
    play(audio)

    print("Listening for approval...")
    user_input = record_text()

    if "–¥–∞" in user_input:
        audio = client.generate(text="‚úÖ –°—É–ø–µ—Ä, –ø—Ä–∞—â–∞–º –∏–º–µ–π–ª–∞", voice=jarvis_voice)
        play(audio)
        send_email(subject, body, to_email)

        return to_email

    elif "–Ω–µ" in user_input:
        audio = client.generate(text="–°–æ—Ä–∫–∞", voice=jarvis_voice)
        play(audio)

        return "–ò–º–∞—à–µ –ø—Ä–æ–±–ª–µ–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞ –≤ –∏–º–µ–π–ª–∞"

def create_appointment(jarvis_voice: str):
    # subject of event
    audio = client.generate(text="–†–∞–∑–±–∏—Ä–∞ —Å–µ, –∫–∞–∫ –∏—Å–∫–∞—Ç–µ –¥–∞ —Å–µ –∫–∞–∑–≤–∞ —Å—ä–±–∏—Ç–∏–µ—Ç–æ?", voice=jarvis_voice)
    play(audio)

    print("Listening for apointment info...")
    subject = record_text()

    # time of event
    audio = client.generate(text="–ó–∞ –∫–æ–≥–∞ –¥–∞ –±—ä–¥–µ —Ç–æ–≤–∞ —Å—ä–±–∏—Ç–∏–µ?", voice=jarvis_voice)
    play(audio)

    print("Listening for apointment info...")
    user_input = record_text()

    # duration of event
    audio = client.generate(text="–ö–æ–ª–∫–æ –≤—Ä–µ–º–µ —â–µ –ø—Ä–æ–¥—ä–ª–∂–∏ —Ç–æ–≤–∞ —Å—ä–±–∏—Ç–∏–µ?", voice=jarvis_voice)
    play(audio)

    print("Listening for apointment info...")
    duration = record_text()


    event_time = parse_natural_time(user_input)
    print(f"Parsed event time: {event_time}")  # Debug output
    audio = client.generate(
        text=f"–°—É–ø–µ—Ä, –∑–∞–ø–∞–∑–≤–∞–º —Å—ä–±–∏—Ç–∏–µ {subject}, –≤ {event_time.strftime('%H:%M %d-%m-%Y')}, –∏ —â–µ —Ç—Ä–∞–µ 1 —á–∞—Å",
        voice=jarvis_voice)
    play(audio)

    create_outlook_appointment(subject, event_time, duration=60)

def readMail(jarvis_voice: str):
    # Initialize Outlook
    outlook = win32.Dispatch("Outlook.Application").GetNamespace("MAPI")
    inbox = outlook.GetDefaultFolder(6)  # 6 = Inbox

    # Get all messages sorted by received time (newest first)
    messages = inbox.Items
    messages.Sort("[ReceivedTime]", True)  # Sort descending (newest first)

    # Retrieve the last 5 emails
    num_emails = 3  # Change this number if you need more
    latest_messages = [messages.GetNext() for _ in range(num_emails)]

    audio = client.generate(text="–ï—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 3 –∏–º–µ–π–ª–∞ –≤ –ø–æ—â–∞—Ç–∞ –≤–∏: ", voice=jarvis_voice)
    play(audio)
    # Print email details
    for i, email in enumerate(latest_messages, start=1):
        print(f"\nüìß Email {i}:")
        print(f"Subject: {email.Subject}")
        print(f"From: {email.SenderName}")
        print(f"Received: {email.ReceivedTime}")
        print("\n--- Email Body ---\n")
        print(email.Body)  # Full email body
        print("\n--- End of Email ---\n")
        audio = client.generate(text=f"–ò–º–µ–π–ª –Ω–æ–º–µ—Ä {i}, –∏–∑–ø—Ä–∞—Ç–µ–Ω–æ –µ –æ—Ç {email.SenderName}, "
                                     f"—Ç–µ–º–∞—Ç–∞ –µ {email.Subject}, –∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ –Ω–∞ –ø–∏—Å–º–æ—Ç–æ –µ {email.Body}",
                                voice=jarvis_voice)
        play(audio)
